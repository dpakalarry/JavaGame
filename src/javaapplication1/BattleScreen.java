/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication1;

import javax.swing.JOptionPane;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;

/**
 *
 * @author Devak Patel and Pavan Hirpara
 * @version 1.2.5
 * Thanks to YOUTUBE USER Pokeli for Pokemon Champion Medley - 8-Bit (50k Subscriber Special #1!)
 */
public class BattleScreen extends javax.swing.JFrame{
    Player pivin;
    int atk;  
    int eTyp;
    
    /**
     * Creates new form NewJFrame
     * @param p sends in player to use
     */
    public BattleScreen(Player p) {
        initComponents();
        pivin = p;
        getContentPane().setBackground(Color.white);
        pgbUsr.setStringPainted(true);
        pgbEne.setStringPainted(true);
        lblNam1.setText(pivin.getName());
        if(pivin.getTyp() == 0)
            lblTyp.setText("Normal");
        else if(pivin.getTyp() == 1)
            lblTyp.setText("Water");
        else if(pivin.getTyp() == 2)
            lblTyp.setText("Fire");
        else if(pivin.getTyp() == 3)
            lblTyp.setText("Earth");
        eTyp = 0;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        menuBar2 = new java.awt.MenuBar();
        menu3 = new java.awt.Menu();
        menu4 = new java.awt.Menu();
        menuBar3 = new java.awt.MenuBar();
        menu5 = new java.awt.Menu();
        menu6 = new java.awt.Menu();
        menuBar4 = new java.awt.MenuBar();
        menu7 = new java.awt.Menu();
        menu8 = new java.awt.Menu();
        jPanel1 = new javax.swing.JPanel();
        butAtkE = new javax.swing.JButton();
        butPot = new javax.swing.JButton();
        butRun = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        pgbUsr = new javax.swing.JProgressBar();
        jLabel4 = new javax.swing.JLabel();
        pgbEne = new javax.swing.JProgressBar();
        lblENam = new javax.swing.JLabel();
        lblNam1 = new javax.swing.JLabel();
        lblLvl = new javax.swing.JLabel();
        lblTlvl1 = new javax.swing.JLabel();
        lblUsr = new javax.swing.JLabel();
        pgbExp = new javax.swing.JProgressBar();
        lblEne = new javax.swing.JLabel();
        butAtkW = new javax.swing.JButton();
        butAtkN = new javax.swing.JButton();
        butAtkF = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblETyp = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        lblTyp = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        jButton2.setText("jButton2");

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        menu3.setLabel("File");
        menuBar2.add(menu3);

        menu4.setLabel("Edit");
        menuBar2.add(menu4);

        menu5.setLabel("File");
        menuBar3.add(menu5);

        menu6.setLabel("Edit");
        menuBar3.add(menu6);

        menu7.setLabel("File");
        menuBar4.add(menu7);

        menu8.setLabel("Edit");
        menuBar4.add(menu8);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Battle!");
        setBackground(new java.awt.Color(250, 250, 250));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusTraversalKeysEnabled(false);
        setForeground(java.awt.Color.white);
        setLocation(new java.awt.Point(500, 200));
        setMaximumSize(new java.awt.Dimension(700, 550));
        setMinimumSize(new java.awt.Dimension(700, 550));
        setName("BATTLE"); // NOI18N
        setPreferredSize(new java.awt.Dimension(700, 550));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(null);

        butAtkE.setBackground(new java.awt.Color(51, 255, 51));
        butAtkE.setText("Earth");
        butAtkE.setFocusPainted(false);
        butAtkE.setFocusable(false);
        butAtkE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAtkEActionPerformed(evt);
            }
        });
        getContentPane().add(butAtkE);
        butAtkE.setBounds(120, 430, 100, 29);
        butAtkE.getAccessibleContext().setAccessibleName("butFit");

        butPot.setText("Potions");
        butPot.setFocusPainted(false);
        butPot.setFocusable(false);
        butPot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPotActionPerformed(evt);
            }
        });
        getContentPane().add(butPot);
        butPot.setBounds(240, 420, 100, 29);
        butPot.getAccessibleContext().setAccessibleName("butItm");

        butRun.setText("Run");
        butRun.setFocusPainted(false);
        butRun.setFocusable(false);
        butRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butRunActionPerformed(evt);
            }
        });
        getContentPane().add(butRun);
        butRun.setBounds(360, 420, 100, 29);
        butRun.getAccessibleContext().setAccessibleName("butRun");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel3.setText("HP:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(24, 223, 31, 25);
        jLabel3.getAccessibleContext().setAccessibleName("lblHpU");

        pgbUsr.setBackground(new java.awt.Color(255, 255, 255));
        pgbUsr.setForeground(new java.awt.Color(51, 255, 0));
        pgbUsr.setToolTipText("");
        pgbUsr.setValue(100);
        pgbUsr.setName("pgbUsr"); // NOI18N
        getContentPane().add(pgbUsr);
        pgbUsr.setBounds(60, 223, 146, 20);
        pgbUsr.getAccessibleContext().setAccessibleName("");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel4.setText("HP:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(275, 29, 31, 22);
        jLabel4.getAccessibleContext().setAccessibleName("lblHpE");

        pgbEne.setForeground(new java.awt.Color(51, 255, 0));
        pgbEne.setValue(100);
        getContentPane().add(pgbEne);
        pgbEne.setBounds(317, 29, 146, 25);
        pgbEne.getAccessibleContext().setAccessibleName("pgbUsr");

        lblENam.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblENam.setText("Slime");
        getContentPane().add(lblENam);
        lblENam.setBounds(110, 30, 160, 20);

        lblNam1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblNam1.setText("Player\n");
        getContentPane().add(lblNam1);
        lblNam1.setBounds(220, 200, 230, 16);

        lblLvl.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblLvl.setText("1");
        getContentPane().add(lblLvl);
        lblLvl.setBounds(90, 180, 18, 17);

        lblTlvl1.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        lblTlvl1.setText("LEVEL:");
        getContentPane().add(lblTlvl1);
        lblTlvl1.setBounds(20, 172, 58, 30);

        lblUsr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication1/Hero (Back).png"))); // NOI18N
        lblUsr.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        lblUsr.setMaximumSize(new java.awt.Dimension(480, 140));
        lblUsr.setMinimumSize(new java.awt.Dimension(480, 140));
        getContentPane().add(lblUsr);
        lblUsr.setBounds(80, 250, 125, 138);
        lblUsr.getAccessibleContext().setAccessibleName("picUsr");

        getContentPane().add(pgbExp);
        pgbExp.setBounds(60, 210, 146, 9);

        lblEne.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication1/Slime.png"))); // NOI18N
        getContentPane().add(lblEne);
        lblEne.setBounds(330, 60, 125, 137);
        lblEne.getAccessibleContext().setAccessibleName("picEne");

        butAtkW.setBackground(new java.awt.Color(0, 102, 204));
        butAtkW.setText("Water");
        butAtkW.setFocusPainted(false);
        butAtkW.setFocusTraversalKeysEnabled(false);
        butAtkW.setFocusable(false);
        butAtkW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAtkWActionPerformed(evt);
            }
        });
        getContentPane().add(butAtkW);
        butAtkW.setBounds(120, 400, 100, 29);

        butAtkN.setText("Normal");
        butAtkN.setFocusPainted(false);
        butAtkN.setFocusTraversalKeysEnabled(false);
        butAtkN.setFocusable(false);
        butAtkN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAtkNActionPerformed(evt);
            }
        });
        getContentPane().add(butAtkN);
        butAtkN.setBounds(20, 400, 100, 29);

        butAtkF.setBackground(new java.awt.Color(255, 0, 51));
        butAtkF.setText("Fire");
        butAtkF.setFocusPainted(false);
        butAtkF.setFocusable(false);
        butAtkF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAtkFActionPerformed(evt);
            }
        });
        getContentPane().add(butAtkF);
        butAtkF.setBounds(20, 430, 100, 29);

        jLabel1.setText("Type:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(60, 60, 40, 20);

        jLabel2.setText("Name:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(60, 30, 40, 20);

        lblETyp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblETyp.setText("Normal");
        getContentPane().add(lblETyp);
        lblETyp.setBounds(110, 60, 160, 20);

        jScrollPane1.setEnabled(false);

        txtLog.setColumns(16);
        txtLog.setFont(new java.awt.Font("Lucida Grande", 1, 11)); // NOI18N
        txtLog.setRows(5);
        txtLog.setText("Log:");
        txtLog.setDragEnabled(false);
        txtLog.setFocusTraversalKeysEnabled(false);
        txtLog.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(txtLog);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(480, 10, 200, 450);

        lblTyp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        getContentPane().add(lblTyp);
        lblTyp.setBounds(220, 220, 230, 16);

        jMenu1.setText("File");

        jMenuItem2.setText("Instructions");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem1.setText("Quit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        getAccessibleContext().setAccessibleName("battle");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Developer created timers
    Timer usrMoveUp = new Timer(4, new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            lblUsr.setLocation(lblUsr.getX() + 10 , lblUsr.getY() - 10);
            if(lblUsr.getX() == 260 && lblUsr.getY() == 70){
                usrMoveUp.stop();
                int test = ((int)(Math.random()*10) +1);
                double patk;
                if(test == 1){
                    patk = 0;
                    txtLog.append("\nYou Missed");
                }
                else if(test <10)
                    patk = pivin.getAtk();
                else{
                    patk = pivin.getAtk()*2;
                    txtLog.append("\nCRITICAL HIT!");
                }
                if(atk != eTyp){
                    if(atk == 1 && eTyp == 2){
                        patk *= 1.2;
                        txtLog.append("\nSuper Effective!");
                    }
                    else if(atk == 1 && eTyp == 3){
                        patk *= .5;
                        txtLog.append("\nNot Very Effective");
                    }
                    else if(atk == 2 && eTyp == 3){
                        patk *= 1.2;
                        txtLog.append("\nSuper Effective!");
                    }
                    else if (atk == 2 && eTyp == 1){
                        patk *= .5;
                        txtLog.append("\nNot Very Effective");
                    }
                    else if(atk == 3 && eTyp == 1){
                        patk *= 1.2;
                        txtLog.append("\nSuper Effective!");
                    }
                    else if(atk == 3 && eTyp == 2){
                        patk *= .5;
                        txtLog.append("\nNot Very Effective");
                    }
                }
                else{
                    if(atk != 0){
                        patk *= .8;
                        txtLog.append("\nKinda Effective");
                    }
                }
                atk = 0;
                int eHP = pgbEne.getValue();
                pgbEne.setValue(eHP-(int)patk);
                if(pgbEne.getValue() == 0){
                  battleWin();
                    lblUsr.setLocation(80, 250);
                    butAtkW.setEnabled(true);
                    butAtkE.setEnabled(true);
                    butAtkN.setEnabled(true);
                    butAtkF.setEnabled(true);
                    butPot.setEnabled(true);
                    butRun.setEnabled(true);
                    return;
                }
                usrMoveDown.start();
            }
        }
    });
    Timer usrMoveDown = new Timer(4, new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            lblUsr.setLocation(lblUsr.getX() - 10 , lblUsr.getY() + 10);
            if(lblUsr.getX() == 80 && lblUsr.getY() == 250){
                usrMoveDown.stop();
                eneMoveDown.start();
            }
        }
    });    
    Timer eneMoveDown = new Timer(4, new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            lblEne.setLocation(lblEne.getX() - 10 , lblEne.getY() + 10);
            if(lblEne.getX() == 150 && lblEne.getY() == 240){
                eneMoveDown.stop();
                int test = (int)(Math.random()*10) +1;
                double Eatk;
                if(test == 1){
                    Eatk = 0;
                    txtLog.append("\nThey Missed :)");
                }
                else{
                    int pTyp = pivin.getTyp();
                    Eatk = pivin.getDef();
                    if(pTyp != eTyp){
                        if(pTyp == 3 && eTyp == 1){
                            Eatk *= 1.2;
                            txtLog.append("\nIt was super effective");
                        }
                        else if(pTyp == 2 && eTyp == 1){
                            Eatk *= .5;
                            txtLog.append("\nIt was not effective!");
                        }
                        else if(pTyp == 2 && eTyp == 2){
                            Eatk *= 1.2;
                            txtLog.append("\nIt was super effective");
                        }
                        else if (pTyp == 1 && eTyp == 2){
                            Eatk *= .5;
                            txtLog.append("\nIt was not effective!");
                        }
                        else if(pTyp == 3 && eTyp == 1){
                            Eatk *= 1.2;
                            txtLog.append("\nIt was super effective");
                        }
                        else if(pTyp == 3 && eTyp == 3){
                            Eatk *= .5;
                            txtLog.append("\nIt was not effective!");
                        }
                    }
                    else{
                        if(pTyp != 0){
                            Eatk *= .8;
                            txtLog.append("\nIt was kinda effective");
                        }
                    }
                }
                pgbUsr.setValue((int) (pgbUsr.getValue() - Eatk));
                if(pgbUsr.getValue() == 0){
                    battleLose();
                    butAtkE.setEnabled(true);
                    butAtkW.setEnabled(true);
                    butAtkN.setEnabled(true);
                    butAtkF.setEnabled(true);
                    butPot.setEnabled(true);
                    butRun.setEnabled(true);
                }
                else
                    eneMoveUp.start();
            }
        }
    });
    Timer eneMoveUp = new Timer(4, new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            lblEne.setLocation(lblEne.getX() + 10 , lblEne.getY() - 10);
            if(lblEne.getX() == 330 && lblEne.getY() == 60){
                eneMoveUp.stop();
                butAtkE.setEnabled(true);
                butAtkW.setEnabled(true);    
                butAtkN.setEnabled(true);
                butAtkF.setEnabled(true);
                butPot.setEnabled(true);
                butRun.setEnabled(true);
            }
        }
    });

    //Developer created methods
    /**
     * method called when player has HP at 0; resets the game
     */
    public void battleLose(){
        eneMoveDown.stop();
        lblEne.setLocation(330,60);
        String s = lblUsr.getText();
        lblEne.setIcon(new javax.swing.ImageIcon(getClass().getResource("Slime.png")));
        lblENam.setText("Slime");
        pgbEne.setValue(100);
        pgbUsr.setValue(100);
        pgbExp.setValue(0);
        lblLvl.setText("1");
        txtLog.setText("Log:");
        JOptionPane.showMessageDialog(null,"YOU LOST (ಥ﹏ಥ)");
        pivin = new Player(false);
        pivin.setName(s);
        if(pivin.getTyp() == 0)
            lblTyp.setText("Normal");
        else if(pivin.getTyp() == 1)
            lblTyp.setText("Water");
        else if(pivin.getTyp() == 2)
            lblTyp.setText("Fire");
        else if(pivin.getTyp() == 3)
            lblTyp.setText("Earth");
        eTyp = 0;
    }   
    /**
     * method called when enemy has HP at 0; progresses the game
     */
    public void battleWin(){
        if(lblENam.getText().equals("Dragon")){
            JOptionPane.showMessageDialog(null,"Congratulations, you slayed the dragon!\n     YOU WIN! (◕‿◕)");
            System.exit(0);
        }
        int xp;
        switch(pivin.getLvl()){
            case 1: 
                xp = (int)(Math.random()*6+70);
                break;
            case 2: 
                xp = (int)(Math.random()*6+65);
                break;
            case 3: 
                xp = (int)(Math.random()*6+60);
                break;
            case 4: 
                xp = (int)(Math.random()*6+55);
                break;
            case 5: 
                xp = (int)(Math.random()*6+50);
                break;
            case 6: 
                xp = (int)(Math.random()*6+45);
                break;
            case 7: 
                xp = (int)(Math.random()*6+40);
                break;
            case 8: 
                xp = (int)(Math.random()*6+35);
                break;
            case 9: 
                xp = (int)(Math.random()*6+30);
                break;
            case 10: 
                xp = (int)(Math.random()*6+25);
                break;
            case 11: 
                xp = (int)(Math.random()*6+20);
                break;
            default: 
                xp = 0;
        }
        txtLog.append("\nYou got " + xp + "XP!");
        int i = pivin.expAdd(xp);
        if(i != -1){
            lblLvl.setText(Integer.toString(pivin.getLvl()));
            switch (i) {
                case 0:
                    txtLog.append("\nYou spot a Health Potion");
                    break;
                case 1:
                    txtLog.append("\nYou spot a Small Attack Potion");
                    break;
                case 2:
                    txtLog.append("\nYou spot a Large Attack Potion");
                    break;
                case 3:
                    txtLog.append("\nYou spot a Small Defence Potion");
                    break;
                case 4:
                    txtLog.append("\nYou spot a Large Defence Potion");
                    break;
                case 5:
                    txtLog.append("\nYou spot a One Hit Gem");
                    break;
                default:
                    break;
            }
        }
        if((int)(Math.random()*2 + 1) == 1){
            i = pivin.addItem();
            switch (i) {
                case 0:
                    txtLog.append("\nYou spot a Health Potion");
                    break;
                case 1:
                    txtLog.append("\nYou spot a Small Attack Potion");
                    break;
                case 2:
                    txtLog.append("\nYou spot a Large Attack Potion");
                    break;
                case 3:
                    txtLog.append("\nYou spot a Small Defence Potion");
                    break;
                case 4:
                    txtLog.append("\nYou spot a Large Defence Potion");
                    break;
                case 5:
                    txtLog.append("\nYou spot a One Hit Gem");
                    break;
                default:
                    break;
            }
        }
        pgbExp.setValue(pivin.getExp());
        pgbEne.setValue(100);
        pgbUsr.setValue(100);
        int nxtEne = (int)(Math.random()*pivin.getLvl()+1);
        switch (nxtEne){
            case 1:
                lblEne.setIcon(new javax.swing.ImageIcon(getClass().getResource("Slime.png")));
                lblENam.setText("Slime");
                eTyp = 0;
                break;
            case 2:
                lblEne.setIcon(new javax.swing.ImageIcon(getClass().getResource("Rat.png")));
                lblENam.setText("Rat");
                eTyp = 0;
            break;
            case 3:
                lblEne.setIcon(new javax.swing.ImageIcon(getClass().getResource("Bat.png")));
                lblENam.setText("Bat");
                eTyp = 0;
                break;
            case 4:
                lblEne.setIcon(new javax.swing.ImageIcon(getClass().getResource("Ghost.png")));
                lblENam.setText("Ghost");
                eTyp = 1;
                break;
            case 5:
                lblEne.setIcon(new javax.swing.ImageIcon(getClass().getResource("Water Elemental.png")));
                lblENam.setText("Water Elemental");
                eTyp = 1;
                break;
            case 6:
                lblEne.setIcon(new javax.swing.ImageIcon(getClass().getResource("Earth Elemental.png")));
                lblENam.setText("Earth Elemental");
                eTyp = 3;
                break;
            case 7:
                lblEne.setIcon(new javax.swing.ImageIcon(getClass().getResource("Fire Elemental.png")));
                lblENam.setText("Fire Elemental");
                eTyp = 2;
                break;
            case 8:
                lblEne.setIcon(new javax.swing.ImageIcon(getClass().getResource("Zombie.png")));
                lblENam.setText("Zombie");
                eTyp = 2;
                break;
            case 9:
                lblEne.setIcon(new javax.swing.ImageIcon(getClass().getResource("Archer.png")));
                lblENam.setText("Archer");
                eTyp = 2;
                break;
            case 10:
                lblEne.setIcon(new javax.swing.ImageIcon(getClass().getResource("Wizard.png")));
                lblENam.setText("Wizard");
                eTyp = 1;
                break;
            case 11:
                lblEne.setIcon(new javax.swing.ImageIcon(getClass().getResource("Dark Mage.png")));
                lblENam.setText("Dark Mage");
                eTyp = 3;
                break;
            default:
                lblEne.setIcon(new javax.swing.ImageIcon(getClass().getResource("Dragon.png")));
                lblENam.setText("Dragon");
                eTyp = 4;
                break;
        }
        switch (eTyp) {
            case 0:     
                lblETyp.setText("Normal");
                break;
            case 1:
                lblETyp.setText("Water");
                break;
            case 2:
                lblETyp.setText("Fire");
                break;
            case 3:
                lblETyp.setText("Earth");
                break;
            case 4:
                lblETyp.setText("Dragon");
            default:
                break;
        }
    }

    //auto generated method headers, method bodies are developer generated
    private void butAtkEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAtkEActionPerformed
        atk = 3;
        butAtkW.setEnabled(false);
        butAtkE.setEnabled(false);
        butAtkN.setEnabled(false);
        butAtkF.setEnabled(false);
        butPot.setEnabled(false);
        butRun.setEnabled(false);    
        usrMoveUp.start();
    }//GEN-LAST:event_butAtkEActionPerformed
    private void butPotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPotActionPerformed
        atk = 0;
        Object[] options = {"Health Potion" + " (" + (pivin.getInventory())[0] + ")",
                       "Small Attack Potion" + " (" + (pivin.getInventory())[1] + ")",
                       "Large Attack Potion" + " (" + (pivin.getInventory())[2] + ")",
                       "Small Defense Potion" + " (" + (pivin.getInventory())[3] + ")",
                       "Large Defense Potion" + " (" + (pivin.getInventory())[4] + ")",
                       "One Hit Gem" + " (" + (pivin.getInventory())[5] + ")"
           };

          int i = JOptionPane.showOptionDialog(null,
       "What item would you like to use?\n"
               + "Health Potion: Fully heals your character\n"
               + "Small Attack Potion: Increases your attack\n"
               + "Large Attack Potion: Greatly increases your attack\n"
               + "Small Defense Potion: Increases your defense\n"
               + "Large Defense Potion: Greatly increases your defense\n"
               + "One Hit Gem: Very rare gem that will obliterate your foes...",
       "Inventory",
       JOptionPane.YES_NO_CANCEL_OPTION,
       JOptionPane.QUESTION_MESSAGE,
       null,
       options,
       null);

       if (i != -1){
           if(pivin.useItem(i)){
            if(i==0){
                pgbUsr.setValue(100);
            } 
            if(i==1){
                pivin.addAtk(5);
            }
            if(i==2){
                pivin.addAtk(10);
            } 
            if(i==3){
                pivin.addDef(-5);
            }
            if(i==4){
                pivin.addDef(-10);
            }
            if(i==5){
                battleWin();
            }
            eneMoveDown.start();
            butAtkW.setEnabled(false);
            butAtkE.setEnabled(false);
            butAtkN.setEnabled(false);
            butAtkF.setEnabled(false);
            butPot.setEnabled(false);
            butRun.setEnabled(false);
           }
           else
              JOptionPane.showMessageDialog(null,"You don't have any of that item!");
        }

    }//GEN-LAST:event_butPotActionPerformed
    private void butRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRunActionPerformed
        Object[] options = {"Yes", "No"};
        
        int i = JOptionPane.showOptionDialog(null,
              "If you run, you will lose your progress... Are you sure you'd like to exit?",
              "Alert",
              JOptionPane.YES_NO_CANCEL_OPTION,
              JOptionPane.QUESTION_MESSAGE,
              null,
              options,
              null);
        
        if(i==0)
        System.exit(0);
    }//GEN-LAST:event_butRunActionPerformed
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Object[] options = {"Yes", "No"};
        int i = JOptionPane.showOptionDialog(null,
              "If you leave, you will lose your progress... Are you sure you'd like to exit?",
              "Alert",
              JOptionPane.YES_NO_CANCEL_OPTION,
              JOptionPane.QUESTION_MESSAGE,
              null,
              options,
              null);
        
        if(i==0)
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JOptionPane.showMessageDialog(null,"Goal: Find and slay the dragon"
                + "\nYou can attack or use a potion at any time with the corresponding buttons"
                + "\nYou can press 1 on your keyboard for normal; 2 for water; 3 for fire; 4 for earth; and 5 for potions"
                + "\nFire is strong on earth, water on fire, and earth on water"
                + "\nAll the elements are resistant to themselves and the element they are weak to"
                + "\nAll except dragon and normal, dragon is strong against everyting, and normal is neither resistant nor strong against anything"
                + "\nOr you can run like a sissy"
                + "\nPRO TIP: you can use the enter button on the dialog boxes");
    }//GEN-LAST:event_jMenuItem2ActionPerformed
    private void butAtkWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAtkWActionPerformed
        atk = 1;
        butAtkW.setEnabled(false);
        butAtkE.setEnabled(false);
        butAtkN.setEnabled(false);
        butAtkF.setEnabled(false);
        butPot.setEnabled(false);
        butRun.setEnabled(false);
        usrMoveUp.start();
    }//GEN-LAST:event_butAtkWActionPerformed
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if(butAtkW.isEnabled()){
            if(evt.getKeyChar() == '5'){
                atk = 0;
                    Object[] options = {"Health Potion" + " (" + (pivin.getInventory())[0] + ")",
                                   "Small Attack Potion" + " (" + (pivin.getInventory())[1] + ")",
                                   "Large Attack Potion" + " (" + (pivin.getInventory())[2] + ")",
                                   "Small Defense Potion" + " (" + (pivin.getInventory())[3] + ")",
                                   "Large Defense Potion" + " (" + (pivin.getInventory())[4] + ")",
                                   "One Hit Gem" + " (" + (pivin.getInventory())[5] + ")"
                       };

                      int i = JOptionPane.showOptionDialog(null,
                   "What item would you like to use?\n"
                           + "Health Potion: Fully heals your character\n"
                           + "Small Attack Potion: Increases your attack\n"
                           + "Large Attack Potion: Greatly increases your attack\n"
                           + "Small Defense Potion: Increases your defense\n"
                           + "Large Defense Potion: Greatly increases your defense\n"
                           + "One Hit Gem: Very rare gem that will obliterate your foes...",
                   "Inventory",
                   JOptionPane.YES_NO_CANCEL_OPTION,
                   JOptionPane.QUESTION_MESSAGE,
                   null,
                   options,
                   null);

                   if (i != -1){
                       if(pivin.useItem(i)){
                          switch(i){
                              case 0:
                                pgbUsr.setValue(100);
                              case 1:
                                pivin.addAtk(5);
                              case 2:
                                pivin.addAtk(10);
                              case 3:
                                pivin.addDef(-5);                      
                              case 4:
                                pivin.addDef(-10);
                              case 5:
                                battleWin();
                          }
                          eneMoveDown.start();
                          butAtkW.setEnabled(false);
                          butAtkE.setEnabled(false);
                          butPot.setEnabled(false);
                          butRun.setEnabled(false);
                       }
                       else
                          JOptionPane.showMessageDialog(null,"You don't have any of that item!");
                    }
            }
            else  {
                atk = evt.getKeyChar() - '0';
                atk --;
                butAtkW.setEnabled(false);
                butAtkE.setEnabled(false);
                butPot.setEnabled(false);
                butRun.setEnabled(false);
                usrMoveUp.start();
            }   
        }
    }//GEN-LAST:event_formKeyPressed
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        requestFocus();
        InputStream music;
        try{
            music = javaapplication1.BattleScreen.class.getResourceAsStream("8bitmusic.wav");
            AudioStream audio=new AudioStream(music);
            //AudioPlayer.player.start(audio);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null,e.getLocalizedMessage());
        } 
    }//GEN-LAST:event_formWindowOpened
    private void butAtkNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAtkNActionPerformed
        atk = 0;
        butAtkW.setEnabled(false);
        butAtkE.setEnabled(false);
        butAtkN.setEnabled(false);
        butAtkF.setEnabled(false);
        butPot.setEnabled(false);
        butRun.setEnabled(false);
        usrMoveUp.start();
    }//GEN-LAST:event_butAtkNActionPerformed
    private void butAtkFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAtkFActionPerformed
        atk = 2;
        butAtkW.setEnabled(false);
        butAtkE.setEnabled(false);
        butAtkN.setEnabled(false);
        butAtkF.setEnabled(false);
        butPot.setEnabled(false);
        butRun.setEnabled(false);
        usrMoveUp.start();
    }//GEN-LAST:event_butAtkFActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butAtkE;
    private javax.swing.JButton butAtkF;
    private javax.swing.JButton butAtkN;
    private javax.swing.JButton butAtkW;
    private javax.swing.JButton butPot;
    private javax.swing.JButton butRun;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblENam;
    private javax.swing.JLabel lblETyp;
    private javax.swing.JLabel lblEne;
    private javax.swing.JLabel lblLvl;
    private javax.swing.JLabel lblNam1;
    private javax.swing.JLabel lblTlvl1;
    private javax.swing.JLabel lblTyp;
    private javax.swing.JLabel lblUsr;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.Menu menu3;
    private java.awt.Menu menu4;
    private java.awt.Menu menu5;
    private java.awt.Menu menu6;
    private java.awt.Menu menu7;
    private java.awt.Menu menu8;
    private java.awt.MenuBar menuBar1;
    private java.awt.MenuBar menuBar2;
    private java.awt.MenuBar menuBar3;
    private java.awt.MenuBar menuBar4;
    private javax.swing.JProgressBar pgbEne;
    private javax.swing.JProgressBar pgbExp;
    private javax.swing.JProgressBar pgbUsr;
    private javax.swing.JTextArea txtLog;
    // End of variables declaration//GEN-END:variables
}
